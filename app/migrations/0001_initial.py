# Generated by Django 3.0.8 on 2020-11-29 07:40

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='ParsingDataSeq',
            fields=[
                ('pds_id', models.BigAutoField(db_column='PDS_ID', primary_key=True, serialize=False)),
                ('total_tuple_count', models.IntegerField(db_column='TOTAL_TUPLE_COUNT')),
                ('duplicated_tuple_count', models.IntegerField(db_column='DUPLICATED_TUPLE_COUNT')),
            ],
            options={
                'db_table': 'PARSING_DATA_SEQ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RawDataSeq',
            fields=[
                ('rds_id', models.BigAutoField(db_column='RDS_ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'RAW_DATA_SEQ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RawDataTemplate',
            fields=[
                ('rdt_id', models.BigAutoField(db_column='RDT_ID', primary_key=True, serialize=False)),
                ('raw_data', models.TextField(db_column='RAW_DATA')),
            ],
            options={
                'db_table': 'RAW_DATA_TEMPLATE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RawFileMetadata',
            fields=[
                ('table_name', models.CharField(db_column='TABLE_NAME', max_length=15, primary_key=True, serialize=False)),
                ('display_name', models.CharField(db_column='DISPLAY_NAME', max_length=15)),
                ('mapping_sql_query', models.CharField(db_column='MAPPING_SQL_QUERY', max_length=1000)),
            ],
            options={
                'db_table': 'RAW_FILE_METADATA',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('subm_id', models.BigAutoField(db_column='SUBM_ID', primary_key=True, serialize=False)),
                ('submit_count', models.IntegerField(db_column='SUBMIT_COUNT')),
                ('duration_info', models.TimeField(db_column='DURATION_INFO')),
                ('parsed', models.TextField(db_column='PARSED')),
            ],
            options={
                'db_table': 'SUBMISSION',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TaskMetadata',
            fields=[
                ('table_name', models.CharField(db_column='TABLE_NAME', max_length=15, primary_key=True, serialize=False)),
                ('display_name', models.CharField(db_column='DISPLAY_NAME', max_length=15)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=100, null=True)),
                ('min_upload_cycle', models.IntegerField(db_column='MIN_UPLOAD_CYCLE')),
                ('activated', models.TextField(db_column='ACTIVATED')),
                ('pass_criterion', models.IntegerField(db_column='PASS_CRITERION')),
            ],
            options={
                'db_table': 'TASK_METADATA',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('id', models.BigAutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=15, null=True, unique=True)),
                ('birth', models.DateField(blank=True, db_column='BIRTH', null=True)),
                ('phone', models.CharField(blank=True, db_column='PHONE', max_length=11, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', '남성'), ('F', '여성')], db_column='GENDER', max_length=1, null=True)),
                ('role', models.CharField(choices=[('A', '관리자'), ('E', '평가자'), ('S', '제출자')], db_column='ROLE', max_length=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'USER',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='NullRatioPerColumn',
            fields=[
                ('pds', models.OneToOneField(db_column='PDS_ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.ParsingDataSeq')),
                ('null_ratio', models.FloatField(db_column='NULL_RATIO')),
            ],
            options={
                'db_table': 'NULL_RATIO_PER_COLUMN',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserAdmin',
            fields=[
                ('id', models.OneToOneField(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'USER_ADMIN',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserEvaluator',
            fields=[
                ('id', models.OneToOneField(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'USER_EVALUATOR',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserSubmitter',
            fields=[
                ('id', models.OneToOneField(db_column='ID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'USER_SUBMITTER',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Evaluates',
            fields=[
                ('uid', models.OneToOneField(db_column='UID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.UserEvaluator')),
                ('status', models.CharField(db_column='STATUS', max_length=1)),
                ('p_np', models.TextField(db_column='P_NP')),
                ('rating', models.IntegerField(db_column='RATING')),
            ],
            options={
                'db_table': 'EVALUATES',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IsAssignedTo',
            fields=[
                ('uid', models.OneToOneField(db_column='UID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.UserEvaluator')),
                ('due', models.DateField(db_column='DUE')),
            ],
            options={
                'db_table': 'IS_ASSIGNED_TO',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipatesIn',
            fields=[
                ('uid', models.OneToOneField(db_column='UID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.UserSubmitter')),
                ('status', models.CharField(db_column='STATUS', max_length=1)),
            ],
            options={
                'db_table': 'PARTICIPATES_IN',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PrevEvaluators',
            fields=[
                ('uid', models.OneToOneField(db_column='UID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.UserEvaluator')),
                ('prev_evaluator', models.CharField(db_column='PREV_EVALUATOR', max_length=15)),
            ],
            options={
                'db_table': 'PREV_EVALUATORS',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RequestsNew',
            fields=[
                ('uid', models.OneToOneField(db_column='UID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.UserSubmitter')),
                ('status', models.CharField(db_column='STATUS', max_length=1)),
            ],
            options={
                'db_table': 'REQUESTS_NEW',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Submits',
            fields=[
                ('uid', models.OneToOneField(db_column='UID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.UserSubmitter')),
            ],
            options={
                'db_table': 'SUBMITS',
                'managed': False,
            },
        ),
    ]
